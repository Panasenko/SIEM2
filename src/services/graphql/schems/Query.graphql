type Query {
    zabbixCliFindById(_id: String!): ZabbixCli
    zabbixCliFind(_id: String): [ZabbixCli]

    version(input: inputArgs): Version
    token(input: inputArgs): Token
    hosts(input: inputArgs): [Hosts]
    hostgroup(input: inputArgs): [Hostgroup]
    applications(input: inputArgs): [Applications]
    graphics(input: inputArgs): [Graphics]
    items(input: inputArgs): [Items]
}

type ZabbixCli {
    name: String,
    description: String,
    url: String,
    token: String,
    _id: String,
    inProgress: Boolean,
    lastTime: String,
    intervalTime: String,
    items: [Items]
}

type Version {
    version: String
}

input inputArgs{
  method: String,
  url: String,
  token: String,
  reqParam: ReqParam
}

input ReqParam {
  user: String,
  password: String,
  hostid: String
}

type Token {
    token: String
}

type Hosts {
    hostid: String,
    host: String,
    name: String,
    description: String,
    status: String,
    graphics(input: inputArgs): [Graphics],
    applications(input: inputArgs): [Applications],
    items(input: inputArgs): [Items]
}

type Hostgroup {
    groupid: String,
    name: String,
    hosts: [Hosts]

}

type Graphics{
    graphid: String,
    name: String,
    items: [Items]
}

type Applications {
    applicationid: String,
    hostid: String,
    name: String,
    items: [Items]
}

type Trigger{
    _id: String,
    name: String,
    description: String,
    itemid: String,
    closeTime: Int,
    disaster: String,
    high: String,
    average: String,
    warning: String,
    information: String,
    ItemIDSchema: ID
}

type Items {
    _id: String,
    itemid: String,
    hostid: String,
    name: String,
    description: String,
    key_: String,
    lastclock: String,
    lastns: String,
    lastvalue: String,
    prevvalue: String,
    applications: [Applications],
    graphs: [Graphics],
    value_type: String,
    units: String,
    triggers: [Trigger]
}

